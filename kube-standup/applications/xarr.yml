---
# Seriously debated publishing this. I don't use them, but others do.
# I asked myself, "Would I rather add value for folks using this repo, or
# take a stand against piracy?" It wasn't a hard decision.
# Don't pirate, kids.

- hosts: 'master'
  become: yes
  become_user: kube

  vars:
    packages:
      - { name: sonarr, image: lscr.io/linuxserver/sonarr:latest, port: 8989, uri: short }
      - { name: radarr, image: lscr.io/linuxserver/radarr:latest, port: 7878, uri: video }
      - { name: readarr, image: lscr.io/linuxserver/readarr:develop, port: 8787, uri: text }
      - { name: lidarr, image: lscr.io/linuxserver/lidarr:latest, port: 8686, uri: audio }
      - { name: mylar, image: lscr.io/linuxserver/mylar3:latest, port: 8090, uri: epub }
  tasks:
    - name: Create PVC to store *arr Configurations
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: "{{ item.name }}-config"
            namespace: usenet
            labels:
              app: "{{ item.name }}"
          spec:
            storageClassName: nfs-client
            accessModes:
              - ReadWriteMany
            resources:
              requests:
                storage: 20Mi
      loop: "{{ packages }}"

    - name: Create *arr Deployment
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            name: "{{ item.name }}"
            namespace: usenet
            labels:
              app: "{{ item.name }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: "{{ item.name }}"
            template:
              metadata:
                labels:
                  app: "{{ item.name }}"
              spec:
                containers:
                - name: "{{ item.name }}"
                  image: "{{ item.image }}"
                  ports:
                  - name: "{{ item.name }}-web"
                    containerPort: 8080
                volumes:
                - name: "{{ item.name }}-data"
                  persistentVolumeClaim:
                    claimName: storage
                - name: "{{ item.name }}-config"
                  persistentVolumeClaim:
                    claimName: "{{ item.name }}-config"
                volumeMounts:
                - name: "{{ item.name }}-data"
                  mountPath: /downloads
                - name: "{{ item.name }}-config"
                  mountPath: /config
      loop: "{{ packages }}"

    - name: Create *arr Services
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ item.name }}-svc"
            namespace: usenet
            labels:
              app: "{{ item.name }}"
          spec:
            ports:
            - name: "{{ item.name }}-svc-port"
              port: 8080
              protocol: TCP
            selector:
              app: "{{ item.name }}"
      loop: "{{ packages }}"

    - name: Create SABNZBD IngressRoute
      kubernetes.core.k8s:
        definition:
          apiVersion: traefik.containo.us/v1alpha1
          kind: IngressRoute
          metadata:
            name: "{{ item.name }}"
            namespace: usenet
          spec:
            entryPoints:
              - websecure
            routes:
            - match: "Host(`{{ item.uri }}.news.madeof.glass`)"
              kind: Rule
              middlewares:
              - name: insecure-auth
                namespace: usenet
              services:
                - name: "{{ item.name }}-svc"
                  port: 8080
                  namespace: usenet
            tls:
              certResolver: letsencrypt
      loop: "{{ packages }}"


