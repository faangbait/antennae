---
# Create Readarr Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: readarr
  namespace: news
  labels:
    app.kubernetes.io/name: readarr
    app.kubernetes.io/part-of: readarr
    app.kubernetes.io/release: nightly
  annotations:
    a8r.io/description: "Notifies you when new books are released"
    a8r.io/owner: "@linuxserver"
    a8r.io/repository: "https://github.com/linuxserver/docker-readarr"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: readarr-web
  template:
    metadata:
      labels:
        app.kubernetes.io/name: readarr-web
        app.kubernetes.io/part-of: readarr
    spec:
      containers:
      - name: readarr-web
        image: lscr.io/linuxserver/readarr:nightly
        envFrom:
        - configMapRef:
            name: lsio-conf
        volumeMounts:
        - mountPath: /downloads
          name: bulk-recent
          subPath: "recent"
        - mountPath: /books
          name: bulk-docs
          subPath: "media/docs"
        - mountPath: /audiobooks
          name: bulk-spoken
          subPath: "media/docs-spoken"
        - mountPath: /config
          name: cfg-readarr
          subPath: "cfg/readarr"
        resources:
          requests:
            memory: 512Mi
            cpu: "2"
          limits:
            memory: 6Gi
            cpu: "6"
      volumes:
        - name: bulk-recent
          glusterfs:
            endpoints: glusterfs-cluster
            path: glass_bulk
            readOnly: false
        - name: bulk-docs
          glusterfs:
            endpoints: glusterfs-cluster
            path: glass_bulk
            readOnly: false
        - name: bulk-spoken
          glusterfs:
            endpoints: glusterfs-cluster
            path: glass_bulk
            readOnly: false
        - name: cfg-readarr
          glusterfs:
            endpoints: glusterfs-cluster
            path: glass_cfg
            readOnly: false
---
# Create Readarr Service
apiVersion: v1
kind: Service
metadata:
  name: readarr-service
  namespace: news
  labels:
    app.kubernetes.io/name: readarr-service
    app.kubernetes.io/part-of: readarr
spec:
  selector:
    app.kubernetes.io/name: readarr-web
  ports:
    - port: 8787
      name: readarr-http
---
# Create Readarr IngressRoute
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: readarr-ingress
  namespace: news
  labels:
    app.kubernetes.io/name: readarr-ingress
    app.kubernetes.io/part-of: readarr
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`docs.news.madeof.glass`)
      kind: Rule
      middlewares:
      - name: secure-auth
        namespace: news
      services:
        - name: readarr-service
          port: readarr-http
  tls:
    certResolver: letsencrypt
