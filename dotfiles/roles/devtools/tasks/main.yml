---
- name: Install latest vscode rpm
  become: true
  dnf:
    name: https://code.visualstudio.com/sha/download?build=stable&os=linux-rpm-x64
    disable_gpg_check: yes
    state: present

- name: Install development packages
  become: true
  package:
    name:
      - ansible
      - python3-pytest
      - direnv

- name: Install development binaries
  become: true
  get_url:
    url: '{{ item.url }}'
    dest: '/usr/local/bin/{{ item.binary }}'
    mode: '0755'
  loop:
    - { url: 'https://trunk.io/releases/trunk', binary: 'trunk' }

# - name: Configure vscode settings
#   copy:
#     content: |
#       {
#         "files.autoSave": "onFocusChange",
#         "editor.bracketPairColorization.enabled": true,
#         "editor.guides.bracketPairs": true,
#         "editor.linkedEditing": true,
#         "editor.mouseWheelZoom": true,
#         "editor.acceptSuggestionOnEnter": "off",
#         "files.insertFinalNewline": true,
#         "window.zoomLevel": 1.25,
#         "window.menuBarVisibility": "toggle",
#         "window.restoreFullscreen": true,
#         "debug.console.fontFamily": "'MesloLGS NF'",
#         "terminal.integrated.enableShellIntegration": true,
#         "terminal.integrated.fontFamily": "'MesloLGS NF'",
#         "terminal.integrated.fontSize": 13,
#         "terminal.integrated.minimumContrastRatio": 4.5,
#         "terminal.integrated.allowChords": false,
#         "terminal.integrated.defaultProfile.linux": "zsh",
#         "terminal.external.linuxExec": "wezterm",
#         "git.alwaysSignOff": true,
#         "git.autofetch": true,
#         "git.closeDiffOnOperation": true,
#         "git.enableCommitSigning": true,
#         "git.postCommitCommand": "push",
#         "git.showPushSuccessNotification": true,
#         "git.useCommitInputAsStashMessage": true,
#         "trunk.trunkGrayOutNonBlockingIssues": false,
#         "workbench.iconTheme": "eq-material-theme-icons-light",
#         "workbench.colorTheme": "Material Theme Darker High Contrast",
#         "redhat.telemetry.enabled": false,
#         "extensions.ignoreRecommendations": true
#       }
#     dest: '$HOME/.config/Code/User/settings.json'

- name: Configure vscode settings
  lineinfile:
    path: '$HOME/.config/Code/User/settings.json'
    mode: '755'
    create: yes
    backup: yes
    line: "    \"{{ item.k }}\": {{ item.v }},"
    regexp: "^    \"{{ item.k }}\": "
    insertafter: "^{"
  loop:
    - { k: files.autoSave, v: "\"onFocusChange\"" }
    - { k: editor.bracketPairColorization.enabled, v: "true" }
    - { k: editor.guides.bracketPairs, v: "true" }
    - { k: editor.linkedEditing, v: "true" }
    - { k: editor.mouseWheelZoom, v: "true" }
    - { k: editor.acceptSuggestionOnEnter, v: "\"off\"" }
    - { k: files.insertFinalNewline, v: "true" }
    - { k: window.zoomLevel, v: 1.25 }
    - { k: window.menuBarVisibility, v: "\"toggle\"" }
    - { k: window.restoreFullscreen, v: "true" }
    - { k: debug.console.fontFamily, v: "\"'MesloLGS NF'\"" }
    - { k: terminal.integrated.enableShellIntegration, v: "true" }
    - { k: terminal.integrated.fontFamily, v: "\"'MesloLGS NF'\"" }
    - { k: terminal.integrated.fontSize, v: 13 }
    - { k: terminal.integrated.minimumContrastRatio, v: 4.5 }
    - { k: terminal.integrated.allowChords, v: "false" }
    - { k: terminal.integrated.defaultProfile.linux, v: "\"zsh\"" }
    - { k: terminal.external.linuxExec, v: "\"terminator\"" }
    - { k: git.alwaysSignOff, v: "true" }
    - { k: git.autofetch, v: "true" }
    - { k: git.closeDiffOnOperation, v: "true" }
    - { k: git.enableCommitSigning, v: "true" }
    - { k: git.postCommitCommand, v: "\"push\"" }
    - { k: git.showPushSuccessNotification, v: "true" }
    - { k: git.useCommitInputAsStashMessage, v: "true" }
    - { k: workbench.iconTheme, v: "\"eq-material-theme-icons-light\"" }
    - { k: workbench.colorTheme, v: "\"Material Theme Darker High Contrast\"" }
    - { k: redhat.telemetry.enabled, v: "false" }
    - { k: extensions.ignoreRecommendations, v: "true" }

# - name: Configure keybindings
#   copy:
#     content: |
#       [
#           {
#               "key": "ctrl+shift+alt+s",
#               "command": "workbench.action.saveWorkspaceAs"
#           },
#           {
#               "key": "ctrl+d ctrl+b",
#               "command": "vscode-docker.images.build"
#           },
#           {
#               "key": "ctrl+d ctrl+p",
#               "command": "vscode-docker.images.push"
#           }
#       ]
#     dest: '$HOME/.config/Code/User/keybindings.json'
- name: Configure vscode keybindings
  lineinfile:
    path: '$HOME/.config/Code/User/keybindings.json'
    mode: '755'
    create: yes
    backup: yes
    line: "  { \"key\": \"{{ item.key }}\", \"command\": \"{{ item.command }}\" },"
    insertafter: "^\\["
    regexp: "{{ item.command }}"

  loop:
    - { key: "ctrl+shift+alt+s", command: "workbench.action.saveWorkspaceAs" }
    - { key: "ctrl+d ctrl+b", command: "vscode-docker.images.build" }
    - { key: "ctrl+d ctrl+p", command: "vscode-docker.images.push" }
    

- name: Install vscode extensions
  command: 'code --install-extension {{ item }}'
  loop:
    - 4ops.terraform
    - batisteo.vscode-django
    - eamodio.gitlens
    - Equinusocio.vsc-material-theme
    - Equinusocio.vsc-material-theme-icons
    - formulahendry.code-runner
    - IBM.output-colorizer
    - mads-hartmann.bash-ide-vscode
    - mhutchie.git-graph
    - mikestead.dotenv
    - ms-azuretools.vscode-docker
    - ms-python.python
    - njpwerner.autodocstring
    - redhat.ansible
    - redhat.fabric8-analytics
    - redhat.java
    - redhat.vscode-yaml
    - redhat.vscode-openshift-extension-pack
    - redhat.vscode-openshift-java-pack
    - ritwickdey.LiveServer
    - Trunk.io
    - Tim-Koehler.helm-intellisense
    - VisualStudioExptTeam.vscodeintellicode
    - wholroyd.jinja

- name: Add vscode-os4 to path
  lineinfile:
    line: export PATH=$PATH:$HOME/.vscode/extensions/redhat.vscode-openshift-connector-*/out/tools/linux:$HOME/.crc/bin/oc
    regexp: ^export PATH=
    path: '$HOME/.zshrc'

- name: Create ~/.config/git
  file:
    path: '$HOME/.config/git/'
    state: directory
    owner: '{{ ansible_user_id }}'
    group: '{{ ansible_user_id }}'
    mode: '751'
    
- name: Move git templates to /etc/git
  copy:
    src: '{{ item }}'
    dest: '$HOME/.config/git/{{ item }}'
    owner: '{{ ansible_user_id }}'
    group: '{{ ansible_user_id }}'
    mode: '640'
  loop:
    - .gitignore_global
    - .gitmessage_global

- name: Git global configuration
  command: "git config --global {{ item.k }} {{ item.v }}"
  loop:
    - { k: "init.defaultbranch", v: "main" }
    - { k: "core.excludesfile", v: "$HOME/.config/git/.gitignore_global" }
    - { k: "core.editor", v: "nano" }
    - { k: "user.name", v: "\"S Smith\"" }
    - { k: "user.email", v: "root@madeof.glass" }
    - { k: "user.signingkey", v: "30CC0D4F" }
    - { k: "commit.gpgsign", v: "true" }
    - { k: "gpg.program", v: "gpg" }
    - { k: "credential.helper", v: "cache" }
    - { k: "commit.template", v: "$HOME/.config/git/.gitmessage_global" }

- name: Create ~/.config/direnv/os4template
  file:
    path: '$HOME/.config/direnv/os4template'
    state: directory
    owner: '{{ ansible_user_id }}'
    group: '{{ ansible_user_id }}'
    mode: '751'

- name: Configure direnv
  copy:
    dest: '$HOME/.config/direnv/direnv.toml'
    owner: '{{ ansible_user_id }}'
    group: '{{ ansible_user_id }}'
    mode: '640'
    content: |
      [whitelist]
      prefix = [ "{{ local_development_root }}" ]

- name: Configure root direnv .envrc
  copy:
    dest: '{{ local_development_root }}/.envrc'
    owner: '{{ ansible_user_id }}'
    group: '{{ ansible_user_id }}'
    mode: '640'
    content: |
      #!/bin/bash -e
      # SETS: OC_PROJECT OC_REG OC_USER
      # env_vars_required OC_TOKEN OC_CLUSTER

      oc whoami
      [[ $? != 0 ]] && oc login https://api.${OC_CLUSTER}:6443 --token="${OC_TOKEN}" || export OC_USER=$(oc whoami)

      export OC_PROJECT=$(oc project -q)
      [[ "${OC_PROJECT}" == "default" ]] && exit 1

      oc get route default-route -n openshift-image-registry -o jsonpath='{.spec.host}'
      [[ $? != 0 ]] && export OC_REG="default-route-openshift-image-registry.apps-${OC_CLUSTER}" || export OC_REG=$(oc get route default-route -n openshift-image-registry -o jsonpath='{.spec.host}')

      export OC_PUSHTARGET=${OC_REG}/${OC_PROJECT}

      docker login -u ${OC_USER} -p ${OC_TOKEN} ${OC_REG}

- name: Move os4 templates to $HOME/.config/direnv/os4template
  copy:
    src: 'os4template'
    dest: '$HOME/.config/direnv/os4template'
    owner: '{{ ansible_user_id }}'
    group: '{{ ansible_user_id }}'
    mode: '640'
    directory_mode: '750'
