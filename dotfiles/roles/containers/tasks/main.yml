---
- name: Install dnf-plugins-core
  dnf:
    name: dnf-plugins-core
    state: latest

- name: Add Docker repository
  command: dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo

- name: Remove docker systemd
  systemd:
    name: docker
    enabled: no
    state: stopped

- name: Remove containerd systemd
  systemd:
    name: containerd
    enabled: no
    state: stopped

- name: Remove Fedora versions of Docker
  yum:
    name: "{{ item }}"
    state: absent
  loop:
    - docker
    - docker-common
    - container-selinux
    - docker-selinux
    - docker-engine

- name: Install Docker
  dnf:
    state: latest
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - skopeo

- name: Create the docker group
  group:
    name: docker
    system: yes
    state: present

- name: Add user to the docker group
  user:
    name: ss
    groups: docker
    append: yes

- name: Write docker daemon file
  copy:
    content: |
      {
        "userns-remap": "default"
      }
    dest: /etc/docker/daemon.json
    owner: root
    group: docker
    mode: '0660'

- name: Write docker config file
  copy:
    content: |
      {
        "credsStore": "pass"
      }
    dest: /etc/docker/config.json
    owner: root
    group: docker
    mode: '0660'


- name: Install password manager and jq
  package:
    name:
      - pass
      - jq
    state: present

- name: Configure docker-credential-pass
  unarchive:
    src: '{{ docker_credential_pass_url }}'
    remote_src: yes
    dest: /usr/local/bin
    attributes: '+x'

- name: Configure Docker to start on boot
  systemd:
    name: docker
    enabled: yes
    state: reloaded

- name: Configure containerd to start on boot
  systemd:
    name: containerd
    enabled: yes

- name: Initialize pass
  become: false
  command: 'pass init {{ gpg_id }}'

- name: Get latest version of kubectl
  command: curl -L -s https://dl.k8s.io/release/stable.txt
  register: kubectl_version

- name: Install kubectl binary
  get_url:
    url: 'https://dl.k8s.io/release/{{ kubectl_version.stdout_lines[0] }}/bin/linux/amd64/kubectl'
    dest: /usr/local/bin/kubectl
    mode: '755'
    group: 'docker'
    # checksum: 'sha256:https://dl.k8s.io/{{ kubectl_version.stdout_lines[0] }}/bin/linux/amd64/kubectl.sha256'

- name: Install kubectl-convert
  get_url:
    url: 'https://dl.k8s.io/release/{{ kubectl_version.stdout_lines[0] }}/bin/linux/amd64/kubectl-convert'
    dest: /usr/local/bin/kubectl-convert
    mode: '755'
    group: 'docker'
    # checksum: 'sha256:https://dl.k8s.io/{{ kubectl_version.stdout_lines[0] }}/bin/linux/amd64/kubectl-convert.sha256'

- name: Install minikube
  get_url:
    url: 'https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64'
    dest: /usr/local/bin/minikube
    mode: '755'
    group: 'docker'

- name: Download helm installer
  get_url:
    url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    dest: /tmp/get_helm.sh
    mode: '700'

- name: Install helm
  command: bash /tmp/get_helm.sh

- name: Install from dnf repository
  dnf:
    name:
      - source-to-image
      - skopeo

- name: Fetch CodeReady Containers 
  unarchive:
    src: https://developers.redhat.com/content-gateway/rest/mirror/pub/openshift-v4/clients/crc/latest/crc-linux-amd64.tar.xz
    dest: /usr/local/bin
    remote_src: yes
    extra_opts:
      - '--strip-components=1'  

- name: Cleanup CRC Install
  file:
    name: /usr/local/bin/LICENSE
    state: absent

- name: Create dbuild
  copy:
    dest: /usr/local/bin/dbuild
    attributes: "+x"
    content: |
      #!/bin/bash -e
      if [ -f "${PWD}/Dockerfile" ] && [ "${OC_PROJECT}" != "default" ]; then
              [[ ! -z "${OC_BUILDTARGET}" ]] && OC_BUILDTARGET=latest
              [[ ! -z "${OC_APPTARGET}" ]] && OC_APPTARGET=$(basename ${PWD} | tr '[:upper:]' '[:lower:]')

              docker build --pull --compress --tag=${OC_PUSHTARGET}/${OC_APPTARGET}:${OC_BUILDTARGET} .
              docker push ${OC_PUSHTARGET}/${OC_APPTARGET}:${OC_BUILDTARGET}
              #skopeo copy --dest-creds=${OC_USER}:${OC_TOKEN} $SRC $DEST

      else
              echo "No Dockerfile / on default."
      fi
