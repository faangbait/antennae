---
- name: Install packages used for containerization
  package:
    name: 
      - dnf-plugins-core #4.1.0
      - skopeo #1.6.0
      - podman #3.4.4
      - jq #1.6
    state: present

# - name: Install source-to-image
#   import_role:
#     name: gitbuilder
#   vars:
#     git_repo: 'openshift/source-to-image'
#     git_build_cmd: ''
#     git_install_cmd: ''

- name: Get latest pass release
  unarchive:
    src: https://git.zx2c4.com/password-store/snapshot/password-store-master.tar.xz
    remote_src: true
    dest: /tmp
    creates: /tmp/password-store-master/

- name: Make pass
  make:
    chdir: /tmp/password-store-master/
    target: install
  become: true

- name: See if pass has been initialized
  become: false
  command: 'pass'
  register: pass_status
  ignore_errors: true

- name: Initialize pass
  become: false
  command: 'pass init {{ primary_gpg_keyid }}'
  when: pass_status is failed

- name: First time running CRC?
  become: false
  stat:
    path: '$HOME/.crc'
  register: crc_stat    

- name: Fetch CodeReady Containers 
  unarchive:
    src: 'https://developers.redhat.com/content-gateway/rest/mirror/pub/openshift-v4/clients/crc/{{ crc_version }}/crc-linux-amd64.tar.xz'
    dest: /usr/local/bin
    remote_src: yes
    extra_opts:
      - '--strip-components=1'  
  when: crc_stat.stat.exists is false

- name: Cleanup CRC Install
  file:
    name: /usr/local/bin/LICENSE
    state: absent
  when: crc_stat.stat.exists is false

- name: Setup CRC
  become: false
  expect:
    command: /usr/local/bin/crc setup
    responses:
      'crc config set consent-telemetry': 'N'
  when: crc_stat.stat.exists is false

- name: Get current threadcount
  become: true
  command: grep -c processor /proc/cpuinfo
  register: proc_threads
  
- name: Config CRC CPUs
  become: false
  command: crc config set cpus {{ proc_threads.stdout }}

- name: Get 50% of current max ram
  become: true
  raw: "getconf -a | grep PAGES | awk 'BEGIN {total = 1} {if (NR == 1 || NR == 3) total *=$NF} END {print int(total / (1024*1024*2))}'"
  register: proc_mem

- name: Config CRC Memory
  become: false
  command: crc config set memory {{ proc_mem.stdout }}

# - name: Create dbuild
#   copy:
#     dest: /usr/local/bin/dbuild
#     mode: '755'
#     content: |
#       #!/bin/bash -e
#       if [ -f "${PWD}/Dockerfile" ] && [ "${OC_PROJECT}" != "default" ]; then
#               [[ ! -z "${OC_BUILDTARGET}" ]] && OC_BUILDTARGET=latest
#               [[ ! -z "${OC_APPTARGET}" ]] && OC_APPTARGET=$(basename ${PWD} | tr '[:upper:]' '[:lower:]')

#               docker build --pull --compress --tag=${OC_PUSHTARGET}/${OC_APPTARGET}:${OC_BUILDTARGET} .
#               docker push ${OC_PUSHTARGET}/${OC_APPTARGET}:${OC_BUILDTARGET}
#               #skopeo copy --dest-creds=${OC_USER}:${OC_TOKEN} $SRC $DEST

#       else
#               echo "No Dockerfile / on default."
#       fi

# - name: Create ocnewapp
#   copy:
#     dest: /usr/local/bin/ocnewapp
#     mode: '755'
#     content: |
#       #!/bin/bash -e
#       # REQ: OC_APP_BUILDERIMAGE OC_APP_GITREPO OC_APP_BRANCH OC_APP_CONTEXTDIR OC_APP_LABEL

#       CMD="oc new-app"
#       FLAGS="--insecure-registry --as-deployment-config --binary=false"

#       if [ ! -z "$OC_APP_BUILDERIMAGE" ]; then
#               FLAGS="${FLAGS} --image=${OC_APP_BUILDERIMAGE} --strategy=source"
#       fi

#       if [ ! -z "$OC_APP_GITREPO" ]; then
#               CMD="${CMD} --code=${OC_APP_GITREPO}"
#       else
#               CMD="${CMD} ."
#       fi

#       if [ ! -z "$OC_APP_BRANCH" ]; then
#               CMD="${CMD}#${OC_APP_BRANCH}"
#       fi

#       if [ ! -z "$OC_APP_CONTEXTDIR" ]; then
#               FLAGS="${FLAGS} --context-dir=${OC_APP_CONTEXTDIR}"
#       fi

#       if [ ! -z "$OC_APP_LABEL" ]; then
#               FLAGS="${FLAGS} -l app=${OC_APP_LABEL} --name=${OC_APP_LABEL}"
#       fi

#       if [ -f ".os4/$OC_APP_LABEL/.buildenv" ]; then
#               FLAGS="${FLAGS} --build-env-file=${PWD}/.os4/${OC_APP_LABEL}/.buildenv"
#       fi

#       if [ -f ".os4/$OC_APP_LABEL/.env" ]; then
#               FLAGS="${FLAGS} --env-file=${PWD}/.os4/${OC_APP_LABEL}/.envvars"
#       fi

#       if [ -f ".os4/$OC_APP_LABEL/.param" ]; then
#               FLAGS="${FLAGS} --param-file=${PWD}/.os4/${OC_APP_LABEL}/.param"
#       fi

#       mkdir -p /tmp/os4
#       ${CMD} ${FLAGS} -o yaml | tee /tmp/os4/app.yaml
#       ${CMD} ${FLAGS}
#       echo ""
#       echo "${CMD} ${FLAGS} sent to /tmp/os4/app.yaml"

